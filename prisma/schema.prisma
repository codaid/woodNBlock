// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  username      String?   @unique
  firstname     String?
  lastname      String?
  emailVerified DateTime?
  image         String?
  coupleId		String?
  sponsorId		String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  responses		Response[]
  orders		Order[]

  sponsor       User?     @relation("UserSponsor", fields: [sponsorId], references: [id])
  sponsees      User[]    @relation("UserSponsor")
}

enum QuizType {
	uniqueCheckbox
	multiCheckbox
	uniqueSelect
	multiSelect
	rank
	text
	order
}

model Quiz {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title			String
  description	String

  quizItems		QuizItem[]
}

model QuizItem {
  id            String    @id @default(cuid())
  title			String
  description	String
  type			QuizType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quizId		String

  quiz			Quiz		@relation(fields: [quizId], references: [id])
  responses		Response[]
}

model Response {
  id        				String    @id @default(cuid())
  userId    				String
  quizItemId				String
  type						QuizType
  answerUniqueCheckbox		String?
  answerMultiCheckbox		String?
  answerUniqueSelect		String?
  answerMultiSelect			String?
  answerRank				String?
  answerText				String?
  answerOrder				String?
  createdAt 				DateTime  @default(now())
  updatedAt 				DateTime  @updatedAt

  user      	User      @relation(fields: [userId], references: [id])
  quizItem  	QuizItem  @relation(fields: [quizItemId], references: [id])
}

enum ProductType {
  service
  product
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  productType ProductType
  quantity	  Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orders      OrderItem[]
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
  refunded
}

model Order {
  id         String			@id @default(cuid())
  userId     String
  createdAt  DateTime		@default(now())
  updatedAt  DateTime		@updatedAt
  status     OrderStatus	@default(pending)

  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id         String      @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int         @default(1)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  order      Order       @relation(fields: [orderId], references: [id])
  product    Product     @relation(fields: [productId], references: [id])
}
